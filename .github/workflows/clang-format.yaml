name: Code Format with Clang-Format

on:
  workflow_dispatch:
    inputs:
      exclude_patterns:
        description: "排除文件/目录 (以逗号间隔)\n Files/Directories to exclude(comma-separated)"
        required: false
        default: ''
      branch:
        description: "要格式化的分支 | Branch to format"
        required: true
        default: ''

permissions:
  contents: write
  pull-requests: read

jobs:
  format-code:
    if: |
      github.repository_owner != 'kurisaW'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          lfs: false

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Check clang-format version
        run: |
          echo "📋 clang-format version information:"
          clang-format --version

      - name: Get changed files from PR
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          since_last_remote_commit: true
          separator: ","

      - name: Find source files to format
        id: find-files
        run: |
          # 获取PR中修改的文件
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "PR中修改的文件: $CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "❌ PR中没有修改的文件"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 过滤出需要格式化的源文件
          FILES=""
          IFS=',' read -ra FILE_ARRAY <<< "$CHANGED_FILES"
          for file in "${FILE_ARRAY[@]}"; do
            if [[ "$file" =~ \.(cpp|h|c|hpp|cc|hh|C|H|cp|cxx|hxx|inc|inl|ipp|tpp|txx)$ ]]; then
              FILES="$FILES$file"$'\n'
            fi
          done
          
          FILES=$(echo "$FILES" | sort | uniq)
          
          # 处理用户输入的排除模式
          EXCLUDE_PATTERNS="${{ github.event.inputs.exclude_patterns }}"
          if [ -n "$EXCLUDE_PATTERNS" ] && [ -n "$FILES" ]; then
            IFS=',' read -ra PATTERNS <<< "$EXCLUDE_PATTERNS"
            for pattern in "${PATTERNS[@]}"; do
              pattern=$(echo "$pattern" | xargs)
              if [ -n "$pattern" ]; then
                pattern=${pattern%/}
                echo "用户排除模式: $pattern"
                FILES=$(echo "$FILES" | grep -v "$pattern" || echo "$FILES")
              fi
            done
          fi
          
          # 处理.ignore_format.yml文件中的排除规则 - 简化版本
          if [ -n "$FILES" ]; then
            echo "开始检查.ignore_format.yml排除规则..."
            FILTERED_FILES=""
            IFS=$'\n' read -d '' -ra FILES_ARRAY <<< "$FILES"
            
            for file in "${FILES_ARRAY[@]}"; do
              if [ -z "$file" ]; then
                continue
              fi
              
              # 检查文件是否应该被排除
              should_exclude=false
              
              # 查找文件所在目录及其父目录中的.ignore_format.yml
              dir=$(dirname "$file")
              while [ "$dir" != "." ]; do
                ignore_file="$dir/.ignore_format.yml"
                if [ -f "$ignore_file" ]; then
                  echo "找到忽略文件: $ignore_file"
                  
                  # 使用更简单的方法解析YAML文件
                  # 先检查文件内容
                  echo "忽略文件内容:"
                  cat "$ignore_file" || true
                  
                  # 提取排除模式 - 简化方法
                  exclude_patterns=$(grep -v '^#' "$ignore_file" | grep -v '^$' | grep -E "^\s*-" | sed -e 's/^[[:space:]]*-[[:space:]]*//' -e 's/[[:space:]]*$//' | tr -d '\r' | tr -d '"' | tr -d "'" 2>/dev/null || true)
                  
                  if [ -n "$exclude_patterns" ]; then
                    echo "找到排除模式:"
                    echo "$exclude_patterns"
                    
                    while IFS= read -r pattern; do
                      pattern=$(echo "$pattern" | xargs)
                      if [ -n "$pattern" ]; then
                        echo "检查模式: '$pattern' 对文件: '$file'"
                        # 简单的模式匹配
                        if [[ "$file" == "$pattern" ]] || 
                           [[ "$file" == */"$pattern" ]] || 
                           [[ "$file" == *"$pattern"* ]]; then
                          echo "❌ 文件 $file 被 $ignore_file 中的模式 '$pattern' 排除"
                          should_exclude=true
                          break 2
                        fi
                      fi
                    done <<< "$exclude_patterns"
                  else
                    echo "忽略文件中没有找到有效的排除模式"
                    # 尝试其他格式
                    alt_patterns=$(grep -E "^exclude:" "$ignore_file" -A 10 2>/dev/null | grep -E "^\s*-" | sed -e 's/^[[:space:]]*-[[:space:]]*//' -e 's/[[:space:]]*$//' | tr -d '\r' | tr -d '"' | tr -d "'" 2>/dev/null || true)
                    if [ -n "$alt_patterns" ]; then
                      echo "找到替代格式的排除模式:"
                      echo "$alt_patterns"
                    fi
                  fi
                fi
                
                # 移动到父目录，防止无限循环
                parent_dir=$(dirname "$dir")
                if [ "$parent_dir" = "$dir" ]; then
                  break
                fi
                dir="$parent_dir"
              done
              
              if [ "$should_exclude" = false ]; then
                FILTERED_FILES="$FILTERED_FILES$file"$'\n'
              fi
            done
            
            FILES="$FILTERED_FILES"
          fi

          if [ -z "$FILES" ]; then
            echo "❌ 没有需要格式化的文件（可能都被排除了）"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "最终需要格式化的文件:"
          echo "$FILES"
          
          FILE_COUNT=$(echo "$FILES" | wc -l)
          echo "找到 $FILE_COUNT 个需要格式化的文件"
          echo "files_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          
          echo "files_list<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Format code with clang-format
        if: steps.find-files.outputs.files_count != '0'
        run: |
          echo "开始格式化代码..."
          FILES="${{ steps.find-files.outputs.files_list }}"
          
          # 创建格式化脚本，确保正确处理包含空格的文件名
          cat > format_files.sh << 'EOF'
          #!/bin/bash
          files="$1"
          while IFS= read -r file; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              echo "📝 格式化: $file"
              clang-format -style=file -i "$file"
              if [ $? -eq 0 ]; then
                echo "✅ 格式化成功: $file"
              else
                echo "❌ 格式化失败: $file"
                exit 1
              fi
            elif [ -n "$file" ]; then
              echo "⚠️  文件不存在: $file"
            fi
          done <<< "$files"
          EOF
          
          chmod +x format_files.sh
          ./format_files.sh "$FILES"
          
          echo "✅ 代码格式化完成"

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "✅ 代码无需格式化"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "📋 检测到格式化更改:"
            git diff --name-only
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add -A
          git commit -m "style: format code with clang-format [skip ci]"
          git push origin HEAD:${{ github.event.inputs.branch }}
          
          echo "✅ 代码格式化完成并已推送到分支 ${{ github.event.inputs.branch }}"

      - name: Summary
        run: |
          echo "=== 格式化总结 ==="
          echo "分支: ${{ github.event.inputs.branch }}"
          echo "用户排除模式: ${{ github.event.inputs.exclude_patterns || '无' }}"
          echo "处理文件数: ${{ steps.find-files.outputs.files_count }}"
          echo "有更改: ${{ steps.check-changes.outputs.has_changes }}"
          echo "clang-format 版本: $(clang-format --version | head -1)"
