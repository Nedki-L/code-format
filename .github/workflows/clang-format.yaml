name: Code Format with Clang-Format

on:
  workflow_dispatch:
    inputs:
      exclude_patterns:
        description: "排除文件/目录 (以逗号间隔)\n Files/Directories to exclude(comma-separated)"
        required: false
        default: ''
      branch:
        description: "要格式化的分支 | Branch to format"
        required: true
        default: ''

permissions:
  contents: write
  pull-requests: read

jobs:
  format-code:
    if: |
      github.event.pull_request.head.repo.fork == true ||
      github.repository != 'kurisaW/code-format'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Validate .clang-format
        run: |
          if [ ! -f ".clang-format" ]; then
            echo "❌ Error: .clang-format file not found in repository root!"
            exit 1
          fi
          echo "✅ Found .clang-format configuration file"
          # 验证配置文件语法
          clang-format --style=file --dump-config > /dev/null 2>&1 || {
            echo "❌ Error: Invalid .clang-format configuration"
            exit 1
          }

      - name: Get changed files from PR
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          since_last_remote_commit: true
          separator: ","

      - name: Find source files to format
        id: find-files
        run: |
          # 获取PR中修改的文件
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "PR中修改的文件: $CHANGED_FILES"
          
          # 如果没有修改的文件，退出
          if [ -z "$CHANGED_FILES" ]; then
            echo "❌ PR中没有修改的文件"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 过滤出需要格式化的源文件（扩展clang-format支持的文件类型）
          FILES=""
          IFS=',' read -ra FILE_ARRAY <<< "$CHANGED_FILES"
          for file in "${FILE_ARRAY[@]}"; do
            if [[ "$file" =~ \.(cpp|h|c|hpp|cc|hh|C|H|cp|cxx|hxx|inc|inl|ipp|tpp|txx)$ ]]; then
              FILES="$FILES$file"$'\n'
            fi
          done
          
          FILES=$(echo "$FILES" | sort | uniq)
          
          # 处理排除模式
          EXCLUDE_PATTERNS="${{ github.event.inputs.exclude_patterns }}"
          if [ -n "$EXCLUDE_PATTERNS" ] && [ -n "$FILES" ]; then
            IFS=',' read -ra PATTERNS <<< "$EXCLUDE_PATTERNS"
            for pattern in "${PATTERNS[@]}"; do
              pattern=$(echo "$pattern" | xargs)  # 去除空格
              if [ -n "$pattern" ]; then
                # 去除末尾的斜杠（如果有）
                pattern=${pattern%/}
                echo "排除模式: $pattern"
                # 使用 grep 过滤排除模式
                FILES=$(echo "$FILES" | grep -v "$pattern" || echo "$FILES")
              fi
            done
          fi
          
          if [ -z "$FILES" ]; then
            echo "❌ 没有需要格式化的文件（可能都被排除了）"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 显示找到的文件用于调试
          echo "需要格式化的文件:"
          echo "$FILES"
          
          FILE_COUNT=$(echo "$FILES" | wc -l)
          echo "找到 $FILE_COUNT 个需要格式化的文件"
          echo "files_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          
          # 将文件列表保存为多行输出
          echo "files_list<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Format code with clang-format
        if: steps.find-files.outputs.files_count != '0'
        run: |
          echo "开始格式化代码..."
          FILES="${{ steps.find-files.outputs.files_list }}"
          
          # 使用clang-format批量格式化文件
          echo "$FILES" | xargs -I {} clang-format -style=file -i "{}"
          
          # 检查每个文件是否成功格式化
          echo "$FILES" | while read -r file; do
            if [ -f "$file" ]; then
              if clang-format -style=file "$file" --dry-run -Werror >/dev/null 2>&1; then
                echo "✅ 格式化成功: $file"
              else
                echo "❌ 格式化失败或语法错误: $file"
                # 显示详细错误信息
                clang-format -style=file "$file" --dry-run
              fi
            else
              echo "⚠️  文件不存在: $file"
            fi
          done
          
          echo "✅ 代码格式化完成"

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "✅ 代码无需格式化"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "📋 检测到格式化更改:"
            git diff --name-only
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add -A
          git commit -m "style: format code with clang-format [skip ci]"
          git push origin HEAD:${{ github.event.inputs.branch }}
          
          echo "✅ 代码格式化完成并已推送到分支 ${{ github.event.inputs.branch }}"

      - name: Summary
        run: |
          echo "=== 格式化总结 ==="
          echo "分支: ${{ github.event.inputs.branch }}"
          echo "排除模式: ${{ github.event.inputs.exclude_patterns || '无' }}"
          echo "处理文件数: ${{ steps.find-files.outputs.files_count }}"
          echo "有更改: ${{ steps.check-changes.outputs.has_changes }}"
          echo "格式化工具: clang-format"
          echo "配置文件: .clang-format"